.版本 2

.程序集 zyJsonDocument, , 公开, 文档
.子程序 是否有效, 逻辑型, 公开
    

.子程序 取指针, 整数型, 公开, 获取指针，方便在只能传递整数型参数的时候使用，传递之后可用 对象.置指针（）
    

.子程序 置指针, , 公开, 设置由 取指针（） 方法返回的指针
    .参数 参数_指针, 整数型

    

.子程序 到文本W, 字节集, 公开, 返回json文本
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_格式化, 逻辑型, 可空, 默认为：假，如果为真：则表示自动添加换行符和制表符
    .参数 参数_是否转义, 逻辑型, 可空, 默认为：真
    .参数 参数_初始缓存大小, 整数型, 可空, 默认：1024

    

.子程序 到文本, 文本型, 公开, 返回json文本
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_格式化, 逻辑型, 可空, 默认为：假，如果为真：则表示自动添加换行符和制表符
    .参数 参数_是否转义, 逻辑型, 可空, 默认为：真
    .参数 参数_初始缓存大小, 整数型, 可空, 默认：1024

    

.子程序 到文本UTF8, 文本型, 公开, 返回json文本
    .参数 参数_路径, 文本型, 可空, UTF-8 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_格式化, 逻辑型, 可空, 默认为：假，如果为真：则表示自动添加换行符和制表符
    .参数 参数_是否转义, 逻辑型, 可空, 默认为：真
    .参数 参数_初始缓存大小, 整数型, 可空, 默认：1024

    

.子程序 取类型, 整数型, 公开, 返回“JV类型_”开头常量
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取类型W, 整数型, 公开, 返回“JV类型_”开头常量
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取父, zyJsonValue, 公开, 返回父级
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取父W, zyJsonValue, 公开, 返回父级
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取成员数, 整数型, 公开, 获取对象类型或数组类型的成员数
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取成员数W, 整数型, 公开, 获取对象类型或数组类型的成员数
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 移除属性W, 逻辑型, 公开, 移除 JV类型_对象 属性，注意：路径不存在的对象会自己创建
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_属性名, 字节集

    

.子程序 移除属性, 逻辑型, 公开, 移除 JV类型_对象 属性，注意：路径不存在的对象会自己创建
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_属性名, 文本型

    

.子程序 移除成员, 逻辑型, 公开, 移除 JV类型_数组 的成员，注意：路径不存在的对象会自己创建
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_索引, 整数型

    

.子程序 移除成员W, 逻辑型, 公开, 移除 JV类型_数组 的成员，注意：路径不存在的对象会自己创建
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_索引, 整数型

    

.子程序 清空, , 公开, 清空值，包括所有下级属性和成员，注意：路径不存在的对象会自己创建
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 清空W, , 公开, 清空值，包括所有下级属性和成员，注意：路径不存在的对象会自己创建
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 添加属性, zyJsonValue, 公开, 添加对象属性，并返回添加的值。 注意：路径不存在的对象会自己创建
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_属性名, 文本型, , 注意仅仅是当前对象下的某个属性名，非路径
    .参数 参数_类型, 整数型, 可空, “JV类型_”开头常量。默认为：JV类型_空

    

.子程序 添加属性W, zyJsonValue, 公开, 添加对象属性，并返回添加的值。 注意：路径不存在的对象会自己创建
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_属性名, 字节集, , 注意仅仅是当前对象下的某个属性名，非路径
    .参数 参数_类型, 整数型, 可空, “JV类型_”开头常量。默认为：JV类型_空

    

.子程序 添加属性值, 逻辑型, 公开, 添加对象属性，并返回添加的值。 注意：路径不存在的对象会自己创建
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_属性名, 文本型, , 注意仅仅是当前对象下的某个属性名，非路径
    .参数 参数_值, zyJsonValue

    

.子程序 添加属性值W, 逻辑型, 公开, 添加对象属性，并返回添加的值。 注意：路径不存在的对象会自己创建
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_属性名, 字节集, , 注意仅仅是当前对象下的某个属性名，非路径
    .参数 参数_值, zyJsonValue

    

.子程序 插入属性W, zyJsonValue, 公开, 插入对象属性，并返回插入的值。 注意：路径不存在的对象会自己创建
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_索引, 整数型, , 插入的位置，如果 位置< 0 或 位置>成员数 则本方法会失败
    .参数 参数_属性名, 字节集, , 插入的属性名
    .参数 参数_类型, 整数型, 可空, “JV类型_”开头常量。默认为：JV类型_空

    

.子程序 插入属性, zyJsonValue, 公开, 插入对象属性，并返回插入的值。 注意：路径不存在的对象会自己创建
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_索引, 整数型, , 插入的位置，如果 位置< 0 或 位置>成员数 则本方法会失败
    .参数 参数_属性名, 文本型, , 插入的属性名
    .参数 参数_类型, 整数型, 可空, “JV类型_”开头常量。默认为：JV类型_空

    

.子程序 置属性, 逻辑型, 公开, 设置对象属性，注意：路径不存在的对象会自己创建
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_属性名, 文本型, , 注意仅仅是当前对象下的某个属性名，非路径
    .参数 参数_值, zyJsonValue

    

.子程序 置属性W, 逻辑型, 公开, 设置对象属性，注意：路径不存在的对象会自己创建
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_属性名, 字节集, , 注意仅仅是当前对象下的某个属性名，非路径
    .参数 参数_值, zyJsonValue

    

.子程序 取属性, zyJsonValue, 公开, 获取对象属性
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_属性名, 文本型, , 注意仅仅是当前对象下的某个属性名，非路径

    

.子程序 取属性W, zyJsonValue, 公开, 获取对象属性
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_属性名, 字节集, , 注意仅仅是当前对象下的某个属性名，非路径

    

.子程序 取属性名W, 字节集, 公开, 获取自身属性名
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取属性名, 文本型, 公开, 获取自身属性名
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 添加成员, zyJsonValue, 公开, 添加数组成员，并返回添加的成员值。注意：路径不存在的对象会自己创建
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_类型, 整数型, 可空, “JV类型_”开头常量。默认为：JV类型_空

    

.子程序 添加成员W, zyJsonValue, 公开, 添加数组成员，并返回添加的成员值。注意：路径不存在的对象会自己创建
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_类型, 整数型, 可空, “JV类型_”开头常量。默认为：JV类型_空

    

.子程序 添加成员值, 逻辑型, 公开, 添加数组成员。注意：路径不存在的对象会自己创建
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_值, zyJsonValue

    

.子程序 添加成员值W, 逻辑型, 公开, 添加数组成员。注意：路径不存在的对象会自己创建
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_值, zyJsonValue

    

.子程序 插入成员, zyJsonValue, 公开, 插入数组成员，并返回插入的成员值。注意：路径不存在的对象会自己创建
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_索引, 整数型, , 索引从0开始
    .参数 参数_类型, 整数型, 可空, “JV类型_”开头常量。默认为：JV类型_空

    

.子程序 插入成员W, zyJsonValue, 公开, 插入数组成员，并返回插入的成员值。注意：路径不存在的对象会自己创建
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_索引, 整数型, , 索引从0开始
    .参数 参数_类型, 整数型, 可空, “JV类型_”开头常量。默认为：JV类型_空

    

.子程序 取成员, zyJsonValue, 公开, 获取数组成员
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_索引, 整数型, , 索引从0开始

    

.子程序 取成员W, zyJsonValue, 公开, 获取数组成员
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_索引, 整数型, , 索引从0开始

    

.子程序 置成员, 逻辑型, 公开, 设置数组成员，注意：路径不存在的对象会自己创建
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_索引, 整数型
    .参数 参数_值, zyJsonValue

    

.子程序 置成员W, 逻辑型, 公开, 设置数组成员，注意：路径不存在的对象会自己创建
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_索引, 整数型
    .参数 参数_值, zyJsonValue

    

.子程序 是否存在W, 逻辑型, 公开, 根据指定的路径判断是否存在，如果不存在返回假，存在返回真
    .参数 参数_路径, 字节集, , 支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 是否存在, 逻辑型, 公开, 根据指定的路径判断是否存在，如果不存在返回假，存在返回真
    .参数 参数_路径, 文本型, , 支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 选择, zyJsonValue, 公开, 根据指定的路径返回一个JsonValue，注意：路径不存在的对象会自己创建
    .参数 参数_路径, 文本型, , 支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 选择W, zyJsonValue, 公开, 根据指定的路径返回一个JsonValue，注意：路径不存在的对象会自己创建
    .参数 参数_路径, 字节集, , 支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 置对象, 逻辑型, 公开, 将指定路径的值设置为一个空对象{ }
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_初始缓存, 整数型, 可空, 默认为：11

    

.子程序 置对象W, 逻辑型, 公开, 将指定路径的值设置为一个空对象{ }
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_初始缓存, 整数型, 可空, 默认为：11

    

.子程序 置数组, 逻辑型, 公开, 将指定路径的值设置为一个空数组[ ]
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_初始缓存, 整数型, 可空, 默认为：8

    

.子程序 置数组W, 逻辑型, 公开, 将指定路径的值设置为一个空数组[ ]
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_初始缓存, 整数型, 可空, 默认为：8

    

.子程序 置文本, 逻辑型, 公开, 设置指定路径的值，如果与之前的类型不匹配，则会清除之前的值，并改变类型为文本
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_文本值, 文本型

    

.子程序 置文本W, 逻辑型, 公开, 设置指定路径的值，如果与之前的类型不匹配，则会清除之前的值，并改变类型为文本
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_文本值, 字节集

    

.子程序 置空W, 逻辑型, 公开, 设置指定路径的值，如果与之前的类型不匹配，则会清除之前的值，并改变类型为空
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 置空, 逻辑型, 公开, 设置指定路径的值，如果与之前的类型不匹配，则会清除之前的值，并改变类型为空
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 置逻辑W, 逻辑型, 公开, 设置指定路径的值，如果与之前的类型不匹配，则会清除之前的值，并改变类型为逻辑型
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_逻辑值, 逻辑型

    

.子程序 置逻辑, 逻辑型, 公开, 设置指定路径的值，如果与之前的类型不匹配，则会清除之前的值，并改变类型为逻辑型
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_逻辑值, 逻辑型

    

.子程序 置双精度W, 逻辑型, 公开, 设置指定路径的值，如果与之前的类型不匹配，则会清除之前的值，并改变类型为双精度型
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_双精度, 双精度小数型

    

.子程序 置双精度, 逻辑型, 公开, 设置指定路径的值，如果与之前的类型不匹配，则会清除之前的值，并改变类型为双精度型
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_双精度, 双精度小数型

    

.子程序 置长整数W, 逻辑型, 公开, 设置指定路径的值，如果与之前的类型不匹配，则会清除之前的值，并改变类型为长整数型
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_长整数, 长整数型

    

.子程序 置长整数, 逻辑型, 公开, 设置指定路径的值，如果与之前的类型不匹配，则会清除之前的值，并改变类型为长整数型
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_长整数, 长整数型

    

.子程序 置整数W, 逻辑型, 公开, 设置指定路径的值，如果与之前的类型不匹配，则会清除之前的值，并改变类型为长整数型
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_整数, 整数型

    

.子程序 置整数, 逻辑型, 公开, 设置指定路径的值，如果与之前的类型不匹配，则会清除之前的值，并改变类型为长整数型
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_整数, 整数型

    

.子程序 置JSON, 逻辑型, 公开, 将指定的原始JSON文本解析到本实例。 注意：路径不存在的对象会自己创建
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_JSON, 文本型
    .参数 参数_解析选项, 整数型, 可空, “JV解析_”开头常量组合，默认：JV解析_USC2解码

    

.子程序 置JSONW, 逻辑型, 公开, 将指定的原始JSON文本解析到本实例。 注意：路径不存在的对象会自己创建
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_JSON, 字节集
    .参数 参数_解析选项, 整数型, 可空, “JV解析_”开头常量组合，默认：JV解析_USC2解码

    

.子程序 置值, 逻辑型, 公开, 将指定的zyJsonValue复制并赋值到本实例。 注意：路径不存在的对象会自己创建
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_JsonValue, zyJsonValue

    

.子程序 置值W, 逻辑型, 公开, 将指定的zyJsonValue复制并赋值到本实例。 注意：路径不存在的对象会自己创建
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_JsonValue, zyJsonValue

    

.子程序 取源数据, 文本型, 公开, 返回在解析时的源文本，不支持 “JV类型_文本型”、“JV类型_对象”和“JV类型_数组” 类型
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取源数据W, 字节集, 公开, 返回在解析时的源文本，不支持 “JV类型_文本型”、“JV类型_对象”和“JV类型_数组” 类型
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取文本, 文本型, 公开, 返回文本值，除了“JV类型_数组”和“JV类型_对象” 两个类型，其他类型都可以返回为文本数据
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取文本W, 字节集, 公开, 返回文本值，除了“JV类型_数组”和“JV类型_对象” 两个类型，其他类型都可以返回为文本数据
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取逻辑W, 逻辑型, 公开, 返回逻辑值
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取逻辑, 逻辑型, 公开, 返回逻辑值
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取双精度W, 双精度小数型, 公开, 返回数值
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取双精度, 双精度小数型, 公开, 返回数值
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取长整数W, 长整数型, 公开, 返回长整数型
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取长整数, 长整数型, 公开, 返回长整数型
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取整数W, 整数型, 公开, 返回整数型
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取整数, 整数型, 公开, 返回整数型
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身

    

.子程序 取所有属性名W, 整数型, 公开, 返回数量
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_属性名, 字节集, 参考 数组

    

.子程序 取所有属性名, 整数型, 公开, 返回数量
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_属性名, 文本型, 参考 数组

    

.子程序 取所有值W, 整数型, 公开, 返回数量
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_值, zyJsonValue, 参考 数组

    

.子程序 取所有值, 整数型, 公开, 返回数量
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_值, zyJsonValue, 参考 数组

    

.子程序 排序对象W, 逻辑型, 公开, 排序对象类型的属性，根据属性名
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_降序, 逻辑型, 可空
    .参数 参数_忽略大小写, 逻辑型, 可空, 默认为：假

    

.子程序 排序对象, 逻辑型, 公开, 排序对象类型的属性，根据属性名
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_降序, 逻辑型, 可空
    .参数 参数_忽略大小写, 逻辑型, 可空, 默认为：假

    

.子程序 排序W, , 公开, 排序
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_回调函数, 子程序指针, , 返回值：整数型 （整数型 JsonValue1，整数型 JsonValue2，整数型 回调参数）
    .参数 参数_回调参数, 整数型, 可空
    .参数 参数_算法, 整数型, 可空, 0、快速排序，1、希尔排序

    

.子程序 排序, , 公开, 排序
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_回调函数, 子程序指针, , 返回值：整数型 （整数型 JsonValue1，整数型 JsonValue2，整数型 回调参数）
    .参数 参数_回调参数, 整数型, 可空
    .参数 参数_算法, 整数型, 可空, 0、快速排序，1、希尔排序

    

.子程序 合并W, 逻辑型, 公开, 将本对象和“参数_被合并json文本”的属性名相同的值替换
    .参数 参数_路径, 字节集, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_被合并json文本, 字节集
    .参数 参数_解析选项, 整数型, 可空, “JV解析_”开头常量组合，默认：JV解析_USC2解码
    .参数 参数_是否添加, 逻辑型, 可空, 如果 对象属性名和“参数_被合并json文本”的属性名 不相同，选择是否添加进本对象。默认为假

    

.子程序 合并, 逻辑型, 公开, 将本对象和“参数_被合并json文本”的属性名相同的值替换
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_被合并json文本, 文本型
    .参数 参数_解析选项, 整数型, 可空, “JV解析_”开头常量组合，默认：JV解析_USC2解码
    .参数 参数_是否添加, 逻辑型, 可空, 如果 对象属性名和“参数_被合并json文本”的属性名 不相同，选择是否添加进本对象。默认为假

    

.子程序 合并对象, 逻辑型, 公开, “参数_对象”将被合并到路径指向的对象，如果键名重复将覆盖，注意：路径不存在的对象会自己创建
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_对象, zyJsonValue, , 本参数必须是 JV类型_对象 类型

    

.子程序 合并数组, 逻辑型, 公开, “参数_数组”将被合并到路径指向的数组，注意：路径不存在的对象会自己创建
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_数组, zyJsonValue, , 本参数必须是 JV类型_数组 类型

    

.子程序 交换, 逻辑型, 公开, 将内容和 参数_用作交换的值 交换, 注意: 当本对象和参数是直接或间距父子关系将会失败, 如果一个是文档, 一个不是文档也会失败
    .参数 参数_路径, 文本型, 可空, 如果留空，则表示当前值。支持：a.b.c[0] 或 [0].a.b.c。如果属性名包含.或 [ ]，可使用转义符\. \[ 和 \]，\\转义自身
    .参数 参数_用作交换的值, zyJsonValue

    

.子程序 创建, 逻辑型, 公开, 使用本类前先创建
    .参数 参数_JSON文本, 文本型, 可空
    .参数 参数_解析选项, 整数型, 可空, “JV解析_”开头常量组合，默认：JV解析_USC2解码
    .参数 参数_错误代码, 整数型, 参考 可空, “JSON_”开头常量
    .参数 参数_错误位置, 整数型, 参考 可空

    

.子程序 创建W, 逻辑型, 公开, 使用本类前先创建
    .参数 参数_JSON文本, 字节集, 可空
    .参数 参数_解析选项, 整数型, 可空, “JV解析_”开头常量组合，默认：JV解析_USC2解码
    .参数 参数_错误代码, 整数型, 参考 可空, “JSON_”开头常量
    .参数 参数_错误位置, 整数型, 参考 可空

    

.子程序 销毁, , 公开, 将本对象的内容释放并清空。如果不调用本方法，则对象在退出其作用区域时会自动被释放
    

.子程序 解析W, 逻辑型, 公开, 将json文本解析为本对象的值
    .参数 参数_json文本, 字节集
    .参数 参数_解析选项, 整数型, 可空, “JV解析_”开头常量组合，默认：JV解析_USC2解码
    .参数 参数_错误代码, 整数型, 参考 可空, “JSON_”开头常量
    .参数 参数_错误位置, 整数型, 参考 可空

    

.子程序 解析, 逻辑型, 公开, 将json文本解析为本对象的值
    .参数 参数_json文本, 文本型
    .参数 参数_解析选项, 整数型, 可空, “JV解析_”开头常量组合，默认：JV解析_USC2解码
    .参数 参数_错误代码, 整数型, 参考 可空, “JSON_”开头常量
    .参数 参数_错误位置, 整数型, 参考 可空

    

.子程序 解析UTF8, 逻辑型, 公开, 将json文本解析为本对象的值
    .参数 参数_json文本, 文本型, , UTF-8
    .参数 参数_解析选项, 整数型, 可空, “JV解析_”开头常量组合，默认：JV解析_USC2解码
    .参数 参数_错误代码, 整数型, 参考 可空, “JSON_”开头常量
    .参数 参数_错误位置, 整数型, 参考 可空

    

